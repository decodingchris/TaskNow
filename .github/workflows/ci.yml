# GitHub Actions CI workflow for TaskNow CLI
# This workflow runs tests, checks coverage, and builds the package on every push and pull request.
# Compatible with Python 3.7+

name: CI for TaskNow CLI

on:
  push:
    branches: ["**"] # Run on all branches
  pull_request:
    branches: ["**"] # Run on all PRs

jobs:
  build-test:
    name: Test and Build on Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests with coverage
        run: |
          coverage run -m pytest
          coverage report
          coverage html  # Generate HTML report

      - name: Upload coverage report artifact
        uses: actions/upload-artifact@v4
        with:
          name: htmlcov-${{ matrix.python-version }}
          path: htmlcov # Directory generated by 'coverage html'

      - name: Build package
        run: python setup.py sdist bdist_wheel

      # Placeholder for future PyPI deployment
      # - name: Publish to PyPI
      #   run: |
      #     python -m pip install --upgrade twine
      #     twine upload dist/*
      #   env:
      #     TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
      #     TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
  publish:
    name: Build and Publish to PyPI
    needs: build-test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install build tools
        run: |
          pip install --upgrade pip build twine

      - name: Build package
        run: python -m build

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: twine upload dist/*
